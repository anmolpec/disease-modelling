{"version":3,"sources":["App.js","components/Header.js","components/GridElement.js","components/Grid.js","components/StartStop.js","components/Graph.js","components/StartVaccine.js","components/LineGraph.js","components/Slider.js","reportWebVitals.js","index.js"],"names":["t","Header","className","GridElement","props","status","useState","element","gridElement","state","setState","elementClickHandler","event","clicked","type","preventDefault","newState","clickHandler","prevState","style","backgroundColor","onClick","onMouseOver","Grid","count","grid","setClicked","onElementClickHandler","elementStateChange","gridTemplateColumns","onMouseDown","onMouseUp","map","id","toggle","StartStop","buttonState","setButtonState","Graph","data","susceptible","toFixed","height","infected","recovered","vaccinated","StartVaccine","INITIAL_ARR","Array","fill","LineGraph","graphData","setGraphData","currentStep","setStep","step","shift","labels","length","datasets","label","borderColor","options","title","display","text","scales","yAxes","ticks","suggestedMin","suggestedMax","animation","Slider","onChange","valueChange","min","max","speed","infectionDuration","infectionSpreadRate","immunity","vaccinationRate","vaccination","gridArray","i","tempArr","j","nextState","infectedFor","immunityDuration","calcNeighbours","arr","c","Math","random","App","number","setNumber","setGrid","statistics","setStatistics","running","setRunning","onClickHandler","setInterval","num","total","clearInterval","sliderChange","target","value","Number","floor","console","log","borderRadius","gridRowStart","gridRowEnd","margin","borderStyle","transform","width","color","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90ddc78b.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nimport \"./App.css\";\n\nimport Header from \"./components/Header\";\nimport Grid from \"./components/Grid\";\nimport StartStop from \"./components/StartStop\";\nimport Graph from \"./components/Graph\";\nimport StartVaccine from \"./components/StartVaccine\";\nimport LineGraph from \"./components/LineGraph\";\nimport Slider from \"./components/Slider\";\n\n//infectionDuration:10, infectionSpreadRate:0.5, immunity:15, vaccinationRate:0.003\n\nlet t;\n\nlet speed = 50;\n\nlet count = 50;\n\nlet infectionDuration = 10;\n\nlet infectionSpreadRate = 0.5;\n\nlet immunity = 15;\n\nlet vaccinationRate = 30;\n\nlet vaccination = false;\n\nlet gridArray = [];\n\nfor (let i = 0; i < count; i++) {\n    let tempArr = [];\n    for (let j = 0; j < count; j++) {\n        let gridElement = {\n            id: i * count + j,\n            state: \"dead\",\n            nextState: \"\",\n            infectedFor: 0,\n            immunityDuration: immunity,\n        };\n        tempArr = [...tempArr, gridElement];\n    }\n    gridArray = [...gridArray, tempArr];\n}\n\nconst calcNeighbours = (arr, i, j) => {\n    let c = 0;\n    if (i - 1 >= 0 && j - 1 >= 0 && arr[i - 1][j - 1].state === \"infected\")\n        c += Math.random();\n    if (i - 1 >= 0 && arr[i - 1][j].state === \"infected\") c += Math.random();\n    if (i - 1 >= 0 && j + 1 < count && arr[i - 1][j + 1].state === \"infected\")\n        c += Math.random();\n    if (j - 1 >= 0 && arr[i][j - 1].state === \"infected\") c += Math.random();\n    if (j + 1 < count && arr[i][j + 1].state === \"infected\") c += Math.random();\n    if (i + 1 < count && j - 1 >= 0 && arr[i + 1][j - 1].state === \"infected\")\n        c += Math.random();\n    if (i + 1 < count && arr[i + 1][j].state === \"infected\") c += Math.random();\n    if (\n        i + 1 < count &&\n        j + 1 < count &&\n        arr[i + 1][j + 1].state === \"infected\"\n    )\n        c += Math.random();\n\n    return c;\n};\n\nfunction App() {\n    const [number, setNumber] = useState(0);\n    const [grid, setGrid] = useState(gridArray);\n    //const [vaccination, setVaccination] = useState(false);\n    const [statistics, setStatistics] = useState({\n        susceptible: 0,\n        infected: 0,\n        recovered: 0,\n        vaccinated: 0,\n    });\n    const [running, setRunning] = useState(false);\n\n    let calcNextState = () => {\n        setGrid((prevState) => {\n            let susceptible = 0,\n                infected = 0,\n                recovered = 0,\n                vaccinated = 0;\n            for (let i = 0; i < prevState.length; i++) {\n                for (let j = 0; j < prevState[0].length; j++) {\n                    if (prevState[i][j].state === \"infected\") {\n                        prevState[i][j].infectedFor =\n                            prevState[i][j].infectedFor - 1;\n                        if (prevState[i][j].infectedFor <= 0) {\n                            prevState[i][j].nextState = \"immune\";\n                            prevState[i][j].immunityDuration = immunity;\n                        } else {\n                            prevState[i][j].nextState = \"infected\";\n                        }\n                    }\n                    if (prevState[i][j].state === \"dead\") {\n                        prevState[i][j].nextState = \"dead\";\n                    }\n                    if (prevState[i][j].state === \"alive\") {\n                        let infectedNeighbours = calcNeighbours(\n                            prevState,\n                            i,\n                            j\n                        );\n                        let infectionProbability =\n                            infectedNeighbours * Math.random();\n                        if (\n                            infectionProbability >\n                            4 - infectionSpreadRate / 100\n                        ) {\n                            prevState[i][j].nextState = \"infected\";\n                            prevState[i][j].infectedFor = infectionDuration;\n                        } else {\n                            prevState[i][j].nextState = \"alive\";\n                        }\n                    }\n                    if (prevState[i][j].state === \"immune\") {\n                        prevState[i][j].immunityDuration =\n                            prevState[i][j].immunityDuration - 1;\n                        if (prevState[i][j].immunityDuration <= 0) {\n                            prevState[i][j].nextState = \"alive\";\n                            prevState[i][j].infectedFor = infectionDuration;\n                        } else {\n                            prevState[i][j].nextState = \"immune\";\n                        }\n                    }\n                    if (prevState[i][j].state === \"permanentlyImmune\") {\n                        prevState[i][j].nextState = \"permanentlyImmune\";\n                    }\n                }\n            }\n            for (let i = 0; i < prevState.length; i++) {\n                for (let j = 0; j < prevState[0].length; j++) {\n                    prevState[i][j].state = prevState[i][j].nextState;\n                    prevState[i][j].nextState = \"\";\n                    if (\n                        vaccination &&\n                        (prevState[i][j].state === \"alive\" ||\n                            prevState[i][j].state === \"immune\" ||\n                            prevState[i][j].state === \"infected\")\n                    ) {\n                        if (Math.random() < vaccinationRate / 10000) {\n                            prevState[i][j].state = \"permanentlyImmune\";\n                        }\n                    }\n                    if (prevState[i][j].state === \"alive\") susceptible += 1;\n                    if (prevState[i][j].state === \"infected\") infected += 1;\n                    if (prevState[i][j].state === \"immune\") recovered += 1;\n                    if (prevState[i][j].state === \"permanentlyImmune\")\n                        vaccinated += 1;\n                }\n                let total = susceptible + infected + recovered + vaccinated;\n                setStatistics({\n                    susceptible: susceptible / total,\n                    infected: infected / total,\n                    recovered: recovered / total,\n                    vaccinated: vaccinated / total,\n                });\n            }\n            return [...prevState];\n        });\n    };\n\n    const onClickHandler = (buttonState) => {\n        setRunning(buttonState);\n        if (buttonState) {\n            t = setInterval(function () {\n                setNumber((num) => {\n                    return num + 1;\n                });\n                calcNextState();\n            }, 1000 - speed * 10);\n        } else {\n            clearInterval(t);\n        }\n    };\n\n    const vaccineHandler = () => {\n        // setVaccination((prevState) => {\n        //     console.log(prevState);\n        //     return !prevState;\n        // });\n        clearInterval(t);\n        vaccination = !vaccination;\n        onClickHandler(running);\n    };\n\n    const elementStateChangeHandler = (event, element) => {\n        event.preventDefault();\n        let id = Number(element.id);\n        let i = Math.floor(id / count);\n        let j = id % count;\n        let newState = element.state;\n        if (newState === \"dead\") newState = \"alive\";\n        else if (newState === \"alive\") newState = \"infected\";\n        //else if (newState === \"infected\") newState = \"permanentlyImmune\";\n        else newState = \"dead\";\n        setGrid((prevState) => {\n            console.log(prevState[i][j]);\n            prevState[i][j].state = newState;\n            if (newState === \"infected\") {\n                prevState[i][j].infectedFor = infectionDuration;\n            }\n            return prevState;\n        });\n        return newState;\n    };\n\n    const sliderChange = (event) => {\n        if (event.target.id === \"infectionDuration\") {\n            infectionDuration = event.target.value;\n        }\n        if (event.target.id === \"infectionSpreadRate\") {\n            infectionSpreadRate = event.target.value;\n        }\n        if (event.target.id === \"immunity\") {\n            immunity = event.target.value;\n        }\n        if (event.target.id === \"vaccinationRate\") {\n            vaccinationRate = event.target.value;\n        }\n        if (event.target.id === \"speed\") {\n            speed = event.target.value;\n            clearInterval(t);\n            onClickHandler(running);\n        }\n    };\n\n    return (\n        <div>\n            <Header />\n            <div className=\"model\">\n                <Grid\n                    grid={grid}\n                    count={count}\n                    elementStateChange={elementStateChangeHandler}\n                />\n                <div className=\"graph\">\n                    <Graph data={statistics}></Graph>\n                    <LineGraph data={statistics} step={number}></LineGraph>\n                </div>\n            </div>\n            <div className=\"controls\">\n                <div className=\"step-button-div\">\n                    <h2 className=\"step-count\">STEP : {number}</h2>\n                    <div className=\"buttons\">\n                        <StartStop clickHandler={onClickHandler} />\n                        <StartVaccine clickHandler={vaccineHandler} />\n                    </div>\n                </div>\n\n                <div className=\"slider-container\">\n                    <div\n                        style={{\n                            backgroundColor: \"rgb(231 215 255)\",\n                            borderRadius: \"10px\",\n                            gridRowStart: \"1\",\n                            gridRowEnd: \"3\",\n                            margin: \"10%\",\n                            borderStyle: \"solid\",\n                            borderColor: \"#8000805e\",\n                        }}\n                    >\n                        <input\n                            type=\"range\"\n                            min=\"0\"\n                            max=\"99\"\n                            id={\"speed\"}\n                            onChange={sliderChange}\n                            style={{\n                                transform: \"rotate(270deg)\",\n                                width: \"100%\",\n                                height: \"70%\",\n                            }}\n                        ></input>\n                        <div style={{ color: \"#3f0c6d\", textAlign: \"center\" }}>\n                            Speed\n                        </div>\n                    </div>\n                    <Slider\n                        valueChange={sliderChange}\n                        id={\"infectionDuration\"}\n                        max={\"100\"}\n                        min={\"1\"}\n                        title={\"Infection Duration\"}\n                    ></Slider>\n                    <Slider\n                        valueChange={sliderChange}\n                        id={\"immunity\"}\n                        max={\"100\"}\n                        min={\"1\"}\n                        title={\"Immunity Duration\"}\n                    ></Slider>\n                    <Slider\n                        valueChange={sliderChange}\n                        id={\"infectionSpreadRate\"}\n                        max={\"399\"}\n                        min={\"301\"}\n                        title={\"Infection Spread Rate\"}\n                    ></Slider>\n                    <Slider\n                        valueChange={sliderChange}\n                        id={\"vaccinationRate\"}\n                        max={\"50\"}\n                        min={\"1\"}\n                        title={\"Vaccination Rate\"}\n                    ></Slider>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import \"./Header.css\";\n\nconst Header = () => {\n    return <h1 className=\"header\">Disease Modeling with Cellular Automata</h1>;\n};\n\nexport default Header;\n","import { useState } from \"react\";\nimport \"./GridElement.css\";\n\nconst GridElement = (props) => {\n    const [state, setState] = useState({ element: props.gridElement });\n\n    const elementClickHandler = (event) => {\n        if (!props.clicked && event.type === \"mouseover\") return;\n        event.preventDefault();\n        let newState = props.clickHandler(event, props.gridElement);\n        setState((prevState) => {\n            return { ...prevState, state: newState };\n        });\n    };\n\n    const elementColor = (status) => {\n        if (status === \"dead\") return \"white\";\n        if (status === \"alive\") return \"green\";\n        if (status === \"infected\") return \"red\";\n        if (status === \"immune\") return \"blue\";\n        if (status === \"permanentlyImmune\") return \"purple\";\n    };\n\n    return (\n        <div\n            className=\"grid-element\"\n            style={{\n                backgroundColor: elementColor(state.element.state),\n            }}\n            onClick={elementClickHandler}\n            onMouseOver={elementClickHandler}\n        ></div>\n    );\n};\n\nexport default GridElement;\n","import { useState } from \"react\";\n\nimport GridElement from \"./GridElement\";\nimport \"./Grid.css\";\n\nconst Grid = (props) => {\n    let count = props.count;\n    let grid = props.grid;\n\n    const [clicked, setClicked] = useState(false);\n\n    const onElementClickHandler = (event, element) => {\n        props.elementStateChange(event, element);\n    };\n\n    return (\n        <div\n            className=\"grid-container\"\n            style={{ gridTemplateColumns: `repeat(${props.count}, 1fr)` }}\n            onMouseDown={() => setClicked(true)}\n            onMouseUp={() => setClicked(false)}\n        >\n            {grid.map((element) => {\n                return element.map((element) => (\n                    <GridElement\n                        key={element.id}\n                        gridElement={element}\n                        clickHandler={onElementClickHandler}\n                        clicked={clicked}\n                    />\n                ));\n            })}\n        </div>\n    );\n};\n\nexport default Grid;\n","import { useState } from \"react\";\n\nimport \"./StartStop.css\";\n\nlet toggle = false;\n\nconst StartStop = (props) => {\n    const [buttonState, setButtonState] = useState(\"START\");\n\n    const onClickHandler = () => {\n        if (buttonState === \"START\") setButtonState(\"STOP\");\n        else setButtonState(\"START\");\n        toggle = !toggle;\n        props.clickHandler(toggle);\n    };\n\n    return (\n        <div className=\"container\">\n            <button onClick={onClickHandler}>{buttonState}</button>\n        </div>\n    );\n};\n\nexport default StartStop;\n","import \"./Graph.css\";\n\nconst Graph = (props) => {\n    return (\n        <div className=\"graph-container\">\n            <div\n                className=\"bar-container\"\n                style={{ backgroundColor: \"#b9ffb9c7\" }}\n            >\n                <div className=\"label\">Susceptible</div>\n                <div className=\"label\">\n                    {(props.data.susceptible * 100).toFixed(0)}%\n                </div>\n                <div\n                    className=\"graph-bar\"\n                    style={{\n                        backgroundColor: \"green\",\n                        height: `${props.data.susceptible * 100}%`,\n                    }}\n                ></div>\n            </div>\n            <div\n                className=\"bar-container\"\n                style={{ backgroundColor: \"#ff000024\" }}\n            >\n                <div className=\"label\">Infected</div>\n                <div className=\"label\">\n                    {(props.data.infected * 100).toFixed(0)}%\n                </div>\n                <div\n                    className=\"graph-bar\"\n                    style={{\n                        backgroundColor: \"red\",\n                        height: `${props.data.infected * 100}%`,\n                    }}\n                ></div>\n            </div>\n            <div\n                className=\"bar-container\"\n                style={{ backgroundColor: \"#96ebef\" }}\n            >\n                <div className=\"label\">Recovered</div>\n                <div className=\"label\">\n                    {(props.data.recovered * 100).toFixed(0)}%\n                </div>\n                <div\n                    className=\"graph-bar\"\n                    style={{\n                        backgroundColor: \"blue\",\n                        height: `${props.data.recovered * 100}%`,\n                    }}\n                ></div>\n            </div>\n            <div\n                className=\"bar-container\"\n                style={{ backgroundColor: \"#9370dba6\" }}\n            >\n                <div className=\"label\">Vaccinated</div>\n                <div className=\"label\">\n                    {(props.data.vaccinated * 100).toFixed(0)}%\n                </div>\n                <div\n                    className=\"graph-bar\"\n                    style={{\n                        backgroundColor: \"purple\",\n                        height: `${props.data.vaccinated * 100}%`,\n                    }}\n                ></div>\n            </div>\n        </div>\n    );\n};\n\nexport default Graph;\n","import { useState } from \"react\";\n\nimport \"./StartStop.css\";\n\nconst StartVaccine = (props) => {\n    const [buttonState, setButtonState] = useState(\"Start Vaccine\");\n\n    const onClickHandler = () => {\n        setButtonState((prevState) => {\n            if (prevState === \"Start Vaccine\") return \"Stop Vaccine\";\n            else return \"Start Vaccine\";\n        });\n        props.clickHandler();\n    };\n\n    return (\n        <div className=\"container\">\n            <button onClick={onClickHandler}>{buttonState}</button>\n        </div>\n    );\n};\n\nexport default StartVaccine;\n","import { useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nimport \"./Graph.css\";\n\nimport LineGraphElement from \"./LineGraphElement.js\";\n\nconst len = 50;\n\nconst INITIAL_ARR = Array(len).fill({\n    susceptible: 0,\n    infected: 0,\n    recovered: 0,\n    vaccinated: 0,\n});\n\nconst LineGraph = (props) => {\n    const [graphData, setGraphData] = useState(INITIAL_ARR);\n    const [currentStep, setStep] = useState(0);\n\n    if (currentStep < props.step) {\n        setGraphData((prevState) => {\n            if (props.step <= len) {\n                prevState[props.step] = props.data;\n            } else prevState = [...prevState, props.data];\n\n            if (props.step > 250) {\n                prevState.shift();\n            }\n\n            return prevState;\n        });\n        setStep((prevState) => prevState + 1);\n    }\n\n    const data = {\n        labels: Array(graphData.length).fill(\"\"),\n        datasets: [\n            {\n                label: \"Susceptible\",\n                data: graphData.map((element) => element.susceptible * 100),\n                borderColor: \"green\",\n                fill: true,\n            },\n            {\n                label: \"Infected\",\n                data: graphData.map((element) => element.infected * 100),\n                borderColor: \"red\",\n            },\n            {\n                label: \"Immune\",\n                data: graphData.map((element) => element.recovered * 100),\n                borderColor: \"blue\",\n            },\n            {\n                label: \"Vaccinated\",\n                data: graphData.map((element) => element.vaccinated * 100),\n                borderColor: \"purple\",\n            },\n        ],\n    };\n\n    const options = {\n        title: {\n            display: true,\n            text: \"Chart Title\",\n        },\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        suggestedMin: 0,\n                        suggestedMax: 100,\n                    },\n                },\n            ],\n        },\n        animation: false,\n    };\n\n    return (\n        <div className=\"line-graph-container\">\n            {/* {graphData.map((element, index) => {\n                return (\n                    <LineGraphElement\n                        position={{ x: index, y: element.infected * 100 }}\n                        color=\"red\"\n                    />\n                );\n            })}\n            {graphData.map((element, index) => {\n                return (\n                    <LineGraphElement\n                        position={{ x: index, y: element.susceptible * 100 }}\n                        color=\"green\"\n                    />\n                );\n            })}\n            {graphData.map((element, index) => {\n                return (\n                    <LineGraphElement\n                        position={{ x: index, y: element.recovered * 100 }}\n                        color=\"blue\"\n                    />\n                );\n            })}\n            {graphData.map((element, index) => {\n                return (\n                    <LineGraphElement\n                        position={{ x: index, y: element.vaccinated * 100 }}\n                        color=\"purple\"\n                    />\n                );\n            })} */}\n\n            <Line data={data} options={options}></Line>\n        </div>\n    );\n};\n\nexport default LineGraph;\n","import \"./Slider.css\";\n\nconst Slider = (props) => {\n    return (\n        <div className=\"slider\">\n            <div>{props.title}</div>\n            <input\n                type=\"range\"\n                onChange={props.valueChange}\n                min={props.min}\n                max={props.max}\n                id={props.id}\n            ></input>\n        </div>\n    );\n};\n\nexport default Slider;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}